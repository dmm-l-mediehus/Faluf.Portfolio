@page "/account/register"

@inject NavigationManager NavigationManager
@inject IUserService UserService

<PageTitle>@Localizer["Register"]</PageTitle>

<h3>@Localizer["Register"]</h3>

<EditForm Model="@RegisterInputModel" OnValidSubmit="RegisterAsync" FormName="RegisterForm">
	<FluentValidationValidator />

	<!-- Username -->
	<div class="mb-3">
		<label for="firstName" class="form-label">@Localizer["Username"]:</label>
		<InputText id="firstName" @bind-Value="@RegisterInputModel.Username" class="form-control" />
		<ValidationMessage For="@(() => RegisterInputModel.Username)" />
	</div>

	<!-- Email -->
	<div class="mb-3">
		<label for="email" class="form-label">@Localizer["Email"]:</label>
		<InputText id="email" @bind-Value="@RegisterInputModel.Email" class="form-control" />
		<ValidationMessage For="@(() => RegisterInputModel.Email)" />
	</div>

	<!-- Password -->
	<div class="mb-3">
		<label for="password" class="form-label">@Localizer["Password"]:</label>
		<InputText id="password" @bind-Value="@RegisterInputModel.Password" class="form-control" />
		<ValidationMessage For="@(() => RegisterInputModel.Password)" />
	</div>

	<!-- Confirm password -->
	<div class="mb-3">
		<label for="confirmPassword" class="form-label">@Localizer["ConfirmPassword"]:</label>
		<InputText id="confirmPassword" @bind-Value="@RegisterInputModel.ConfirmPassword" class="form-control" />
		<ValidationMessage For="@(() => RegisterInputModel.ConfirmPassword)" />
	</div>

	<!-- Terms Accepted -->
	<div class="form-check mb-3">
		<InputCheckbox id="isTermsAccepted" class="form-check-input" @bind-Value="@RegisterInputModel.IsTermsAccepted" />
		<label for="isTermsAccepted" class="form-check-label">@Localizer["AcceptTerms"]</label>
		<ValidationMessage For="@(() => RegisterInputModel.IsTermsAccepted)" />
	</div>

	<!-- Register -->
	<div class="mb-3">
		<button type="submit" class="btn btn-primary btn-block">Register</button>
	</div>

	@if (!string.IsNullOrWhiteSpace(ErrorMessage))
	{
		<div class="alert alert-danger mt-3" role="alert">
			@((MarkupString)ErrorMessage)
		</div>
	}
</EditForm>

@code {
	[SupplyParameterFromForm(FormName = "RegisterForm")]
	private RegisterInputModel RegisterInputModel { get; set; } = new()
	{
		Username = "Skod",
		Email = "test@test.com",
		Password = "Test123!",
		ConfirmPassword = "Test123!",
		IsTermsAccepted = true
	};

	private async Task RegisterAsync()
	{
		Result<User> registerResult = await UserService.RegisterAsync(RegisterInputModel, CancellationToken);

		if (!registerResult.IsSuccess)
		{
			SetErrorMessage(registerResult);

			return;
		}

		NavigationManager.NavigateTo("/account/login");
	}
}