@using Microsoft.AspNetCore.DataProtection
@using Microsoft.AspNetCore.Localization
@using System.Globalization

@inject ITokenProvider TokenProvider
@inject IDataProtectionProvider DataProtectionProvider

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <base href="/" />
    <title>Faluf Portfolio</title>

    <!-- FontAwesome Free -->
    <link href="css/fontawesome/fontawesome.min.css" rel="stylesheet" />
    <link href="css/fontawesome/brands.min.css" rel="stylesheet" />
    <link href="css/fontawesome/solid.min.css" rel="stylesheet" />

    <!-- Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <link rel="stylesheet" href="@Assets["css/app.css"]" />
    <link rel="stylesheet" href="@Assets["Faluf.Portfolio.Blazor.styles.css"]" />
    <link rel="icon" type="image/png" href="images/favicon.png" />

    <ImportMap />
    <HeadOutlet @rendermode="PageRenderMode" />
</head>

<body>
    <AppRoutes @rendermode="PageRenderMode" />

    <script src="_framework/blazor.web.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script>
        window.blazorCulture = {
        get: () => window.localStorage['BlazorCulture'],
        set: (value) => window.localStorage['BlazorCulture'] = value
        };
    </script>
</body>

</html>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private IComponentRenderMode? PageRenderMode => HttpContext.AcceptsInteractiveRouting() ? InteractiveServer : null;

    protected override void OnInitialized() 
    {
        HttpContext.Response.Cookies.Append(CookieRequestCultureProvider.DefaultCookieName, CookieRequestCultureProvider.MakeCookieValue(new RequestCulture(CultureInfo.CurrentCulture, CultureInfo.CurrentUICulture)));

        string? accessToken = HttpContext.Request.Cookies[Globals.AccessToken];

        if (accessToken is null)
        {
            return;
        }

        accessToken = DataProtectionProvider.CreateProtector(Globals.AuthProtector).Unprotect(accessToken);

        IEnumerable<Claim> claims = new JwtSecurityTokenHandler().ReadJwtToken(accessToken).Claims;

        TokenProvider.TokenDTO = new TokenDTO(accessToken, claims.First(x => x.Type is JwtRegisteredClaimNames.Jti).Value);
    }
}